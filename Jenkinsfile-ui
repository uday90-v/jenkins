pipeline {
   agent any
   stages {
     stage('Select docker registry') {
         when {
             expression { env.DEPLOY == 'true' || env.PUSH_REGISTRY == 'true' }
         }
         steps {
              script {
                def REGISTRY_LIST = []
                def buildStages = env.getEnvironment()
                for (builds in buildStages) {
                    if(builds.key.startsWith("REGISTRY_")) {
                      println builds.key
                      REGISTRY_LIST.add(builds.value)
                    }
                }
                println REGISTRY_LIST
                env.select_docker_registry = input  message: 'Select docker registry ',ok : 'Proceed',id :'tag_id',
                parameters:[choice(choices: REGISTRY_LIST, description: 'Select docker registry', name: 'dockerregistry')]
                echo "Selected Registry is ${env.select_docker_registry}"
                env.registryCredId="REGISTRY_"+env.select_docker_registry
              }
         }
     }

     stage('Select Environment') {
         when{
                   expression { env.DEPLOY == 'true' }
         }
         steps {
              script {
                def SERVER_LIST=[]
                def buildStages = env.getEnvironment()
                for (builds in buildStages) {
                    if(builds.key.startsWith("SERVER_")) {
                      println builds.key
                      SERVER_LIST.add(builds.value)
                    }
                }
                println SERVER_LIST
                env.selected_environment = input  message: 'Select environment ',ok : 'Proceed',id :'tag_id',
                parameters:[choice(choices: SERVER_LIST, description: 'Select environment', name: 'env')]
                echo "Deploying ${env.selected_environment}."
                env.credid = "SSH_"+env.selected_environment
              }
         }
     }
     stage('Checkout') {
		    when{
            expression { env.CHECKOUT == 'true' }
         }
          steps {
            git branch: "${BRANCH}", credentialsId:'service', url:''
          }
        }
     stage('Capture Version') {
          steps {
                script {
                       def pom = readMavenPom file: 'pom.xml'
                       env.version = pom.version
                       echo "${pom.version}"
                       echo "${env.version}"
                }
           }
      }
	 stage('Build NPM') {
        when {
              expression { env.NPM_BUILD == 'true' }
        }
        steps {
              sh """
                    cd UI/
                    npm install
                    npm install -g @angular/cli@6.0.8
                    #npm install --save-dev @angular-devkit/build-angular
                    ng build --configuration=docker

                    mkdir -p build
                    cp -r dist/dashboard/* build/
                    chmod -R 775 build
                    cd build
                    ls -lrt
                    tar -czvf ui2.tar *
                    mv ui2.tar ../files
                    rm -rf build
				      """
            }
     }
     stage('Build Image') {
		    when{
            expression { env.BUILD_IMAGE == 'true' }
        }
        steps {
                sh """
                cd UI
                docker build -t ui .
                """
        }
     }
     stage('Coverage') {
		    when{
            expression { env.COVERAGE == 'true' }
        }
        steps {
                sh """
                cd UI
                npm install --save-dev @angular-devkit/build-angular
                sudo ng test --code-coverage 
                sudo sed -i 's|SF:/var/jenkins_home/jobs/UI_Build/workspace/UI/|SF:|g' coverage/lcov.info
                """
        }
     }
     stage('Sonar') {
		    when{
            expression { env.SONAR == 'true' }
        }
        steps {
                sh """
                cd UI
                sudo npm install -D sonarqube-scanner
                sudo npm run sonar
                """
        }
     }

     stage('Push_Registry') {
		     when{
            expression { env.PUSH_REGISTRY == 'true' }
         }
         steps {
                withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                                 sh """
                                                            docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                                                            docker tag ui:latest ${env.select_docker_registry}/speedy/ui:latest
                                                            docker push ${env.select_docker_registry}/speedy/ui:latest
                                                            docker logout ${env.select_docker_registry}
                                 """
                }
         }
     }
     stage('deploy') {
          when{
                expression { env.DEPLOY == 'true' }
          }
          steps {

                withCredentials([
                                                                       usernamePassword(credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'),
                                                                       usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')
                                                                       ]) {
                                                                               sh """
                                                                                   > /tmp/ui_hosts
                                                                                   echo "[server]" > /tmp/ui_hosts
                                                                                   echo " ${env.selected_environment}" >> /tmp/ui_hosts
                                                                                   cd ansible_deployment/
                                                                                   ansible-playbook -i /tmp/ui_hosts playbooks/deploy.yaml -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'repository_name=${env.REGISTRY_REPOSITORY}' -e 'selected_registry=${env.select_docker_registry}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}'
                                                                               """
                }
            }
     }
		 stage('notification') {
          when{
                expression { env.notification == 'true' }
            }
          steps{
              sh 'echo TODO NOTIFICATION'
          }
     }
   }
}
