pipeline {
   agent any
   stages {
      stage('Select docker registry') {
         when{
              expression { env.DEPLOY == 'true' || env.PUSH_REGISTRY == 'true' }
         }
         steps {
              script {
                def REGISTRY_LIST = []
                def buildStages = env.getEnvironment()
                for (builds in buildStages) {
                    if(builds.key.startsWith("REGISTRY_")) {
                      REGISTRY_LIST.add(builds.value)
                    }
                }
                env.select_docker_registry = input  message: 'Select docker registry ',ok : 'Proceed',id :'tag_id',
                parameters:[choice(choices: REGISTRY_LIST, description: 'Select docker registry', name: 'dockerregistry')]
                echo "Selected Registry is ${env.select_docker_registry}"
                env.registryCredId="REGISTRY_"+env.select_docker_registry
              }
         }
      }
      stage('Select Environment') {
         when {
             expression { env.DEPLOY == 'true' }
         }
         steps {
              script {
                def SERVER_LIST=[]
                def buildStages = env.getEnvironment()
                for (builds in buildStages) {
                    if(builds.key.startsWith("SERVER_")) {
                      SERVER_LIST.add(builds.value)
                    }
                }
                env.selected_environment = input  message: 'Select environment ',ok : 'Proceed',id :'tag_id',
                parameters:[choice(choices: SERVER_LIST, description: 'Select environment', name: 'env')]
                echo "Deploying ${env.selected_environment}."
                env.credId= "SSH_"+env.selected_environment
              }
         }
      }
      stage('Checkout') {
        when {
                expression { env.CHECKOUT == 'true' }
        }
        steps {
               git branch: "${BRANCH}", credentialsId:'service', url:''
        }
      }
      stage('Capture Version') {
          steps {
                script {
                       def pom = readMavenPom file: 'pom.xml'
                       env.version = pom.version
                       echo "${pom.version}"
                       echo "${env.version}"
                }
           }
      }
      stage('Build Commons') {
            when{
                  expression { env.BUILD == 'true' }
            }
            steps {
                  sh "mvn clean install -f pom.xml"
            }
      }
      stage('Build API') {
        when{
            expression { env.BUILD == 'true' }
        }
            steps {
                sh "mvn clean install -f customapi/pom.xml"
            }
      }
	  stage('CodeAnalysis'){
	    when{
            expression { env.SONAR == 'true' }
        }
          steps{
			  sh """
			  mvn sonar:sonar -Dsonar.host.url= -Dsonar.login= -Dsonar.projectKey= -Dsonar.projectName= -f customapi/pom.xml
              """
              }
			}
      stage('Push Registry') {
        when{
            expression { env.PUSH_REGISTRY == 'true' }
         }
         steps {
              withCredentials([usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
              sh """
                    docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${env.select_docker_registry}
                    docker tag customapi:${env.version} ${env.select_docker_registry}/speedy/customapi:${env.version}
                    docker push ${env.select_docker_registry}/speedy/customapi:${env.version}
                    docker logout ${env.select_docker_registry}
                """
              }
          }
      }
      stage('Deploy') {
        when{
            expression { env.DEPLOY == 'true' }
        }
          steps {
                withCredentials([
                usernamePassword(credentialsId: env.credId, passwordVariable: 'SSH_PASSWORD', usernameVariable: 'SSH_USERNAME'),
                usernamePassword(credentialsId: env.registryCredId, passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')
                ]) {
                        sh """
                            > /tmp/customapi_hosts
                            echo "[server]" > /tmp/customapi_hosts
                            echo " ${env.selected_environment}" >> /tmp/customapi_hosts
                            cd ansible_deployment/
                            ansible-playbook -i /tmp/customapi_hosts playbooks/deploy.yaml -e 'registry_username=${REGISTRY_USERNAME}' -e 'registry_password=${REGISTRY_PASSWORD}' -e 'selected_server=${env.selected_environment}' -e 'repository_name=${env.REGISTRY_REPOSITORY}' -e 'selected_registry=${env.select_docker_registry}' -e 'version=${env.version}' -e 'ansible_ssh_pass=${SSH_PASSWORD}' -e 'ansible_ssh_user=${SSH_USERNAME}'
                        """
                }
            }
      }
      stage('Notification'){
        when{
            expression { env.NOTIFICATION == 'true' }
        }
          steps {
              sh 'echo TODO NOTIFICATION'
          }
      }
   }
}
